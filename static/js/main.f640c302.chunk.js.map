{"version":3,"sources":["component/breathFirst.js","component/table.js","App.js","index.js","component/tablecss.module.css"],"names":["breathFrist","tab","Promise","resolve","reject","queue","visited","visitedPrev","push","row","col","length","shift","neighbors","i","nRow","nCol","key","includes","state","path","current","j","console","log","Table","useState","setTab","refs","setRefs","wallPut","setWallPut","Cell","props","color","setColor","useImperativeHandle","reff","changeColor","timer","setInterval","clearTimeout","animationDelay","ref","onMouseEnter","index","className","styles","divstyle","style","backgroundColor","keyit","createCellTab","tmp","top","left","cellColor","zindex","pos","x","y","elRefs","Array","fill","map","_","React","createRef","a","bfs","delay","split","parseInt","reverse","useEffect","type","onClick","position","item","App","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.f640c302.chunk.js","sourcesContent":["function breathFrist(tab) {\n\n    return new Promise ((resolve, reject) => { \n        let queue = []\n        let visited = []\n        let visitedPrev= {}\n\n        queue.push({row:10, col: 15})\n        visited.push(\"10x15\")\n\n        while(queue.length > 0) {\n\n            const {row, col} = queue.shift()        \n            \n            if (row === 10 && col === 50)\n                break\n\n            const neighbors = [\n                { row: row - 1, col},\n                { row, col: col + 1},\n                { row: row + 1, col},\n                { row, col: col - 1}\n            ]\n\n            for (let i = 0; i < 4; i++) {\n                const nRow = neighbors[i].row\n                const nCol = neighbors[i].col\n\n                const key = `${nRow}x${nCol}`\n\n                if (nRow >= 20 || nRow < 0 || nCol >= 70 || nCol < 0)\n                    continue\n                if (!(visited.includes(key)) && tab[70 * nRow + nCol].state !== 'wall') {\n                    queue.push({row: nRow, col: nCol})\n                    visited.push(key)\n                    visitedPrev[key] = `${row}x${col}`\n                }\n            }\n            if (queue.length > 2000)\n                break\n        }\n        const path = []\n        let tofind = \"10x15\"\n        let current = \"10x50\"\n        let j = 0\n        do {\n            path.push(current)\n            current = visitedPrev[current]\n            j++\n            if (j > 1500) {\n                console.log(\"no path\")\n                resolve(null)\n                return\n            }\n        } while (tofind !== current)\n        path.push(current)\n        console.log(\"resolving\")\n        resolve([path, visited])\n    })\n}\n\nexport default breathFrist;","import React, {useEffect, useState, useImperativeHandle} from 'react';\nimport breathFrist from './breathFirst'\nimport styles from \"./tablecss.module.css\"\n\nfunction Table() {\n\n    const [tab, setTab] = useState([])\n    const [refs, setRefs] = useState([])\n    const [wallPut, setWallPut] = useState(false)\n\n    // const [, updateState] = React.useState();\n    // const forceUpdate = React.useCallback(() => updateState({}), []);\n\n    //////////////////\n    // Create CELL //\n    ////////////////\n    function Cell(props) {\n\n        const [color, setColor] = useState(props.color)\n\n        function changeState() {\n            if (wallPut && props.index !== 715 && props.index !== 750) {\n                tab[props.index].color = \"#000000ff\"\n                tab[props.index].state = \"wall\"\n                setColor(\"#000000ff\")\n            }\n        }\n\n        useImperativeHandle(props.reff, () => ({\n\n            changeColor(color) {\n                let timer = setInterval(() => {\n                    setColor(color)\n                    clearTimeout(timer)\n                }, props.animationDelay)\n                \n                \n            }        \n        }));\n\n        return <div ref={props.reff} onMouseEnter={changeState} className={styles.divstyle} style={{...props.style, ...{backgroundColor: color}}} key={props.keyit} ></div>\n    }\n\n\n    useEffect(() => {\n        createCellTab()\n    } , [])\n\n    function pulWalls() {\n        if (wallPut === false) {\n            setWallPut(true)\n        } else {\n            setWallPut(false)\n        }\n    }\n\n    function createCellTab() {\n        let tmp = []\n        let top = 0\n        let left = 0\n\n        let cellColor = \"#ffffffff\"\n        for (let i = 0; i < 20; i++) {\n            for (let j = 0; j < 70; j++) {\n\n                if (i === 10 && j === 15) {\n                    cellColor = \"#cc1616ff\"\n                }\n                else if (i === 10 && j === 50) {\n                    cellColor = \"#cc8f16ff\"\n                }\n                else {\n                    cellColor = \"#ffffffff\"\n                }\n                tmp.push({\n                    style:{ top: top,left: left, zindex: 1},\n                    keyit:`t-${i}-${j}`,\n                    animationDelay : 0,\n                    pos: {x: i, y: j},\n                    color: cellColor,\n                    state: \"blanc\",\n                }\n                )\n                left += 25\n            }\n            left = 0\n            top += 25\n        }\n        setRefs(elRefs => (Array(20*70).fill().map((_, i) => elRefs[i] || React.createRef())));\n        setTab(tmp)\n    }\n\n    async function findPath() {\n        let bfs = await breathFrist(tab)\n        let path = bfs[0]\n        let visited = bfs[1]\n        let delay = 2000\n\n        for (let i = 0; visited[i]; i++) {\n            if (visited[i] !== \"10x15\" && visited[i] !== \"10x50\") {\n                let current = visited[i].split('x')\n                let nRow = parseInt(current[0])\n                let nCol = parseInt(current[1])\n                delay += 2000\n                tab[70 * nRow + nCol].animationDelay = delay\n                refs[70 * nRow + nCol].current.changeColor(\"#345ad9ff\")\n            }\n            \n        }\n\n        delay += 20000\n        path = path.reverse()\n        for(let i = 0; path[i]; i++) {\n            if (path[i] !== \"10x15\" && path[i] !== \"10x50\") {\n                let current = path[i].split('x')\n                let nRow = parseInt(current[0])\n                let nCol = parseInt(current[1])\n                delay += 2000\n                tab[70 * nRow + nCol].animationDelay = delay\n                refs[70 * nRow + nCol].current.changeColor(\"#39bd2dff\")\n            }\n        }\n    }\n\n    return (\n        <div>\n            <button type=\"button\" onClick={pulWalls}>Add Walls</button>\n            <button type=\"button\" onClick={findPath} >Find path</button>\n            <button type=\"button\" onClick={createCellTab} >reset</button>\n            <div style={{position: \"absolute\"}}>\n                {\n                    tab.map((item, index) => {\n                        return (\n                            <Cell reff={refs[index]} key={item.keyit} style={item.style} pos={item.pos} state={item.state} index={index} color={item.color}/>\n                        )\n                    })\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default Table;","import Table from \"./component/table\"\nimport React from 'react';\n\nfunction App() {\n\n  return (\n      <Table/> \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"divstyle\":\"tablecss_divstyle__16Ixq\"};"],"sourceRoot":""}